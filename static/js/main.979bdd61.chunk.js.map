{"version":3,"sources":["reportWebVitals.js","reducers/todoReducer.js","components/TodoListItem.js","components/TodoList.js","components/TodoAdd.js","hooks/useForm.js","components/Todo.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","todoReducer","state","action","type","payload","filter","todo","id","map","done","useStyles","makeStyles","theme","root","width","maxWidth","backgroundColor","palette","background","paper","TodoListItem","index","handleDelete","handleToggle","complete","textDecoration","classes","labelId","List","dense","className","ListItem","button","style","ListItemText","primary","desc","color","onClick","ListItemSecondaryAction","Checkbox","edge","onChange","checked","inputProps","TodoList","todos","i","TodoAdd","handleAddTodo","initialState","useState","values","setValues","target","name","value","useForm","description","handleInputChange","reset","onSubmit","e","preventDefault","trim","length","newTodo","Date","getTime","TextField","label","autoComplete","variant","Button","marginLeft","size","init","JSON","parse","localStorage","getItem","Todo","useReducer","dispatch","useEffect","setItem","stringify","todoId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.979bdd61.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const todoReducer = (state = [], action) => {\n\n    switch (action.type) {\n        case 'add':\n            return [...state, action.payload];\n\n        case 'delete':\n            return state.filter(todo => todo.id !== action.payload); // 123123123\n\n\n        case 'toggle':\n            return state.map(todo =>\n                (todo.id === action.payload)\n                    ? { ...todo, done: !todo.done }\n                    : todo\n            );\n\n        case 'toggle-old':\n            return state.map(todo => {\n\n                if (todo.id === action.payload) {\n                    return {\n                        ...todo,\n                        done: !todo.done\n                    }\n                } else {\n                    return todo;\n                }\n\n            })\n\n        default:\n            return state;\n    }\n\n\n}","import React from 'react';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport './todo.css';\n\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n        maxWidth: 360,\n        backgroundColor: theme.palette.background.paper,\n    },\n}));\n\n\n\nexport const TodoListItem = ({ todo, index, handleDelete, handleToggle }) => {\n\n    const complete = {\n        textDecoration: todo.done ? 'line-through' : 'none'\n    }\n    const classes = useStyles();\n\n    const labelId = `checkbox-list-secondary-label-${todo.id}`;\n\n    return (\n        <List dense className={classes.root}>\n            <ListItem\n                key={todo.id} button\n                style={complete}>\n                <ListItemText id={labelId} primary={`${index + 1}. ${todo.desc}`} />\n                <HighlightOffIcon\n                    color=\"secondary\"\n                    onClick={() => handleDelete(todo.id)}\n                />\n                <ListItemSecondaryAction>\n                    <Checkbox\n                        color=\"primary\"\n                        edge=\"end\"\n                        onChange={() => handleToggle(todo.id)}\n                        checked={todo.done}\n                        inputProps={{ 'aria-labelledby': labelId }}\n                    />\n                </ListItemSecondaryAction>\n            </ListItem>\n\n        </List>\n    )\n}","import React from 'react'\nimport { TodoListItem } from './TodoListItem'\n\nexport const TodoList = ({ todos, handleDelete, handleToggle }) => {\n    return (\n        <ul className=\"list-group list-group-flush\">\n            {\n                todos.map((todo, i) => (\n                    <TodoListItem\n                        key={todo.id}\n                        todo={todo}\n                        index={i}\n                        handleDelete={handleDelete}\n                        handleToggle={handleToggle}\n                    />\n                ))\n            }\n        </ul>\n    )\n}\n","import React from 'react'\nimport { useForm } from '../hooks/useForm';\nimport { TextField, Button } from '@material-ui/core';\n\n\nexport const TodoAdd = ({ handleAddTodo }) => {\n\n    const [{ description }, handleInputChange, reset] = useForm({\n        description: ''\n    });\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if (description.trim().length <= 1) {\n            return;\n        }\n\n        const newTodo = {\n            id: new Date().getTime(),\n            desc: description,\n            done: false\n        };\n\n        handleAddTodo(newTodo);\n        reset();\n\n    }\n\n\n    return (\n        <>\n            <h4>Adding TODO's</h4>\n            <hr />\n\n            <form onSubmit={handleSubmit}>\n                <TextField\n                    name=\"description\"\n                    label=\"Add a new task\"\n                    type=\"search\"\n                    autoComplete=\"off\"\n                    variant=\"outlined\"\n                    value={description}\n                    onChange={handleInputChange}\n\n                />\n\n                <Button\n                    style={{marginLeft: '20px'}}\n                    variant=\"contained\"\n                    size=\"large\"\n                    type=\"submit\"\n                    color=\"primary\"\n                >\n                    Add\n\n                </Button>\n\n            </form>\n\n        </>\n    )\n}","import { useState } from \"react\"\n\n\nexport const useForm = (initialState = {}) => {\n\n    const [values, setValues] = useState(initialState);\n\n    const reset = () => {\n        setValues(initialState);\n    }\n\n\n    const handleInputChange = ({ target }) => {\n\n        setValues({\n            ...values,\n            [target.name]: target.value\n        });\n\n    }\n\n    return [values, handleInputChange, reset];\n\n};","import React, { useReducer, useEffect } from 'react'\nimport { todoReducer } from '../reducers/todoReducer';\n\nimport { TodoList } from './TodoList';\nimport { TodoAdd } from './TodoAdd';\n\nimport './todo.css'\n\n\nconst init = () => {\n\n    return JSON.parse(localStorage.getItem('todos')) || [];\n\n}\n\nexport const Todo = () => {\n\n    const [todos, dispatch] = useReducer(todoReducer, [], init);\n\n    useEffect(() => {\n        localStorage.setItem('todos', JSON.stringify(todos));\n    }, [todos]);\n\n\n    const handleDelete = (todoId) => {\n\n        const action = {\n            type: 'delete',\n            payload: todoId\n        }\n\n        dispatch(action);\n    }\n\n    const handleToggle = (todoId) => {\n\n        dispatch({\n            type: 'toggle',\n            payload: todoId\n        });\n\n    }\n\n    const handleAddTodo = (newTodo) => {\n\n        dispatch({\n            type: 'add',\n            payload: newTodo\n        });\n\n    }\n\n\n    return (\n        <div>\n            <h1>TodoApp ( {todos.length} ) </h1>\n            <hr />\n\n            <div className=\"row\">\n\n                <div className=\"col-5\">\n\n                    <TodoAdd\n                        handleAddTodo={handleAddTodo}\n                    />\n\n                </div>\n                <div className=\"col-7\">\n\n                    <TodoList\n                        todos={todos}\n                        handleDelete={handleDelete}\n                        handleToggle={handleToggle}\n                    />\n\n                </div>\n\n\n\n            </div>\n\n        </div>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport { Todo } from './components/Todo';\n\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Todo />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}